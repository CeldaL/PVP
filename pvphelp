local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- === NOMBRE SOBRE LA CABEZA ===
local function createNameTag(character, playerName, isTargeted)
	if not character then return end

	local head = character:FindFirstChild("Head") or character:WaitForChild("Head", 5)
	if not head or character:FindFirstChild("NameTag") then return end

	local billboard = Instance.new("BillboardGui")
	billboard.Name = "NameTag"
	billboard.Adornee = head
	billboard.Size = UDim2.new(0, 100, 0, 30)
	billboard.StudsOffset = Vector3.new(0, 3, 0)
	billboard.AlwaysOnTop = true
	billboard.MaxDistance = math.huge

	local textLabel = Instance.new("TextLabel")
	textLabel.Parent = billboard
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = playerName
	textLabel.TextColor3 = Color3.new(1, 1, 1)
	textLabel.TextStrokeTransparency = 0
	textLabel.TextScaled = true
	textLabel.Font = Enum.Font.SourceSansBold

	billboard.Parent = character
end

local function setupPlayer(player)
	if player == LocalPlayer then return end

	local function onCharacterAdded(character)
		createNameTag(character, player.Name, false)
	end

	if player.Character then
		onCharacterAdded(player.Character)
	end

	player.CharacterAdded:Connect(onCharacterAdded)
end

for _, player in pairs(Players:GetPlayers()) do
	setupPlayer(player)
end

Players.PlayerAdded:Connect(setupPlayer)

-- === ANTI FALL COOLDOWN EXTREMO ===
local function noFallCooldown(character)
	local humanoid = character:WaitForChild("Humanoid")

	humanoid.StateChanged:Connect(function(oldState, newState)
		if newState == Enum.HumanoidStateType.GettingUp then
			humanoid:ChangeState(Enum.HumanoidStateType.Running)
		elseif newState == Enum.HumanoidStateType.FallingDown or newState == Enum.HumanoidStateType.Physics then
			humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
		end
	end)

	while humanoid and humanoid.Parent do
		if humanoid:GetState() == Enum.HumanoidStateType.GettingUp or humanoid:GetState() == Enum.HumanoidStateType.FallingDown then
			humanoid:ChangeState(Enum.HumanoidStateType.Running)
		end
		task.wait(0.01)
	end
end

LocalPlayer.CharacterAdded:Connect(noFallCooldown)
if LocalPlayer.Character then
	noFallCooldown(LocalPlayer.Character)
end

-- === ANTI RAGDOLL ===
local function preventRagdoll(character)
	local humanoid = character:WaitForChild("Humanoid")

	for _, v in ipairs(character:GetDescendants()) do
		if v:IsA("BallSocketConstraint") or v:IsA("HingeConstraint") or v:IsA("Motor6D") then
			v.Enabled = true
		end
	end

	humanoid.StateChanged:Connect(function(old, new)
		if new == Enum.HumanoidStateType.Physics or new == Enum.HumanoidStateType.FallingDown or new == Enum.HumanoidStateType.Ragdoll then
			humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
		end
	end)

	local function monitor()
		while character and character.Parent do
			if not humanoid or not humanoid.Parent then
				character:BreakJoints()
			end
			task.wait(0.5)
		end
	end

	task.spawn(monitor)
end

LocalPlayer.CharacterAdded:Connect(preventRagdoll)
if LocalPlayer.Character then
	preventRagdoll(LocalPlayer.Character)
end
